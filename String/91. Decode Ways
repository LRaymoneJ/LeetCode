方法一：

public int numDecodings(String s) {
        if(s==null || s.length()==0) return 0;
        if(s.charAt(0)=='0') return 0;
        int [] number = new int[s.length() + 1];
        number[0] = 1;
        number[1] = 1;
        int tmp;
        for(int i=2;i<=s.length();i++) {
            //检查当前字符是不是'0'
            tmp = Integer.parseInt(s.substring(i-1,i));
            if(tmp!=0) number[i] = number[i-1];
            //检查当前字符和前一个字符组合在一起是否在1-26之间
            if(s.charAt(i-2)!='0') {
                tmp = Integer.parseInt(s.substring(i-2,i));
                if(tmp>0 && tmp<=26) number[i] += number[i-2];
            }
        }
        return number[s.length()];
    }


方法二：

public static int numDecodings(String s) {
        int[] count = new int[1];
        count[0] = 0;
        helper(s,0,0,count);
        helper(s,0,1,count);
        return count[0];
    }
    public static void helper(String s,int start,int end,int[] count) {
        if (end >= s.length()) return;
        int temp = 0;
        int i = 0;
        while (start + i <= end) {
            temp = temp * 10 + s.charAt(start+i) - '0';
            i ++;
        }
        if (start < end && temp < 10) return;
        if (temp <= 0 || temp > 26) return;
        else if (end == s.length()-1) {
            count[0] ++; return;
        }
        helper(s, end+1, end+1, count);
        helper(s, end+1, end+2, count);
    }
