public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0],nums[1]);
        return Math.max(helper(nums,0,nums.length-2),helper(nums,1,nums.length-1));
    }
    public int helper(int[] nums,int start,int end) {
        int n = end - start + 1;
        int[] d = new int[n];
        d[0] = nums[start];
        d[1] = Math.max(nums[start],nums[start+1]);
        for (int i = 2; i < n; i++) {
            d[i] = Math.max(d[i-2] + nums[start+i],d[i-1]);
        }
        return d[n-1];
    }
