public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        helper(result,temp,0,target,candidates);
        return result;
    }
    public void helper(List<List<Integer>> result,List<Integer> temp,int start,int target,int[] candidates) {
        if (target == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }
        if (target < 0) return;
        int pre = -1;
        for (int i = start; i < candidates.length; i++) {
            if (pre != candidates[i]) {
                temp.add(candidates[i]);
                helper(result, temp, i + 1, target - candidates[i], candidates);
                temp.remove(temp.size() - 1);
                pre = candidates[i];
            }
        }
    }
