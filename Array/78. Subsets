public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new LinkedList<>();
        List<Integer> temp = new LinkedList<>();
        result.add(temp);
        if (nums == null) return result;
        Arrays.sort(nums);
        for (int i = 1; i <= nums.length; i++) {
            temp.clear();
            dfs(result,temp,nums,0,i);
        }
        return result;
    }
    public static void dfs(List<List<Integer>> result,List<Integer> temp,int[] nums,int start,int number) {
        if (number == temp.size()) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < nums.length; i++) {
            temp.add(nums[i]);
            dfs(result,temp,nums,i+1,number);
            temp.remove(temp.size() - 1);
        }
    }
