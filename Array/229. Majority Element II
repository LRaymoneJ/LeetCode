方法一：

public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new LinkedList<>();
        if (nums == null || nums.length == 0) return result;
        if (nums.length == 1) {
            result.add(nums[0]);
            return result;
        }
        Integer c1 = 1,c2 = 0;
        int n1 = nums[0],n2 = 0;
        for (int i = 1; i < nums.length; i++) {
            int temp = nums[i];
            if (temp == n1) c1 ++;
            else if (temp == n2) c2 ++;
            else if (c1 == 0) {
                n1 = temp;
                c1 = 1;
            }
            else if (c2 == 0) {
                n2 = temp;
                c2 = 1;
            }
            else {
                c1 --;
                c2 --;
            }
        }
        c1 = 0;
        c2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (n1 == nums[i]) c1 ++;
            else if (n2 == nums[i]) c2 ++;
        }
        if (c1 > nums.length / 3) result.add(n1);
        if (c2 > nums.length / 3) result.add(n2);
        return result;
    }
    
    
方法二：

public static List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new LinkedList<>();
        Map<Integer,Integer> map = new HashMap<>();
        for (int i: nums) {
            if (map.containsKey(i)) {
                map.put(i,map.get(i)+1);
            }
            else map.put(i,1);
        }
        for (Map.Entry<Integer,Integer> entry: map.entrySet()) {
            if (entry.getValue() > nums.length / 3)
                result.add(entry.getKey());
        }
        return result;
    }
