方法一：    
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new LinkedList<>();
        if (root == null) return result;
        List<TreeNode> list = new LinkedList<>();
        list.add(root);
        findRight(list,result);
        return result;
    }
    public void findRight(List<TreeNode> list,List<Integer> result) {
        if (list.isEmpty()) return;
        result.add(list.get(list.size()-1).val);
        List<TreeNode> nextfl = new LinkedList<>();
        for (TreeNode temp:list) {
            if (temp.left != null) nextfl.add(temp.left);
            if (temp.right != null) nextfl.add(temp.right);
        }
        findRight(nextfl,result);
    }

方法二：
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new LinkedList<>();
        if (root == null) return result;
        List<TreeNode> list = new LinkedList<>();
        list.add(root);
        list.add(null);
        while (!list.isEmpty()) {
            TreeNode temp = list.remove(0);
            if (temp == null) {
                if (list.isEmpty()) break;
                else list.add(null);
            }
            else {
                if (list.get(0) == null) result.add(temp.val);
                if (temp.left != null) list.add(temp.left);
                if (temp.right != null) list.add(temp.right);
            }
        }
        return result;
    }
