方法一：

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null)
            return result;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.empty()){
            TreeNode temp = stack.pop();
            result.add(temp.val);
            if(temp.right != null){
                stack.push(temp.right);
            }
            if(temp.left != null){
                stack.push(temp.left);
            }
        }
        return result;
    }
    
方法二：

    public static List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;
        preOrder(root,result);
        return result;
    }
    public static void preOrder(TreeNode root,List<Integer> list) {
        list.add(root.val);
        if (root.left == null && root.right == null) return;
        if (root.left != null) preOrder(root.left,list);
        if (root.right != null) preOrder(root.right,list);
    }
