static List<Integer> result = new ArrayList<>();
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if (nums == null || nums.length == 0) return result; 
        List<Integer> temp = new ArrayList<>();
        Arrays.sort(nums);
        int[] max = new int[1];
        helper(nums,0,temp,max);
        return result;
    }
    public void helper(int[] nums,int start,List<Integer> temp,int[] max) {
        if (temp.size()>max[0]){
            max[0] = temp.size();
            result = new ArrayList<>(temp);
        }
        if (start == nums.length) return;
        for (int i = start; i < nums.length; i++) {
            if (temp.size()==0){
                temp.add(nums[i]);
                helper(nums, i+1, temp, max);
                temp.remove(temp.size()-1);
            }
            else {
                int top = temp.get(temp.size()-1);
                if (nums[i] % top == 0) {
                    temp.add(nums[i]);
                    helper(nums, i+1, temp, max);
                    temp.remove(temp.size()-1);
                }
            }
        }
    }
